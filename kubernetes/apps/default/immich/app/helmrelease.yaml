---
# yaml-language-server: $schema=https://kubernetes-schemas.pages.dev/helm.toolkit.fluxcd.io/helmrelease_v2.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app immich
spec:
  interval: 1h
  chartRef:
    kind: OCIRepository
    name: app-template
  install:
    remediation:
      retries: -1
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  values:
    controllers:
      server:
        annotations:
          secret.reloader.stakater.com/reload: &secret immich-secret
          configmap.reloader.stakater.com/reload: &configmap immich-configmap
        pod:
          topologySpreadConstraints:
            - maxSkew: 1
              topologyKey: kubernetes.io/hostname
              whenUnsatisfiable: DoNotSchedule
              labelSelector:
                matchLabels:
                  app.kubernetes.io/instance: *app
                  app.kubernetes.io/component: server
        containers:
          server:
            image:
              repository: ghcr.io/immich-app/immich-server
              tag: v1.135.0
            env:
              IMMICH_WORKERS_INCLUDE: api
              DB_PASSWORD:
                valueFrom:
                  secretKeyRef:
                    name: immich-pguser-immich
                    key: password
            envFrom:
              - configMapRef:
                  name: *configmap
            probes:
              liveness: &probes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /api/server/ping
                    port: &serverport 2283
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *probes
            securityContext:
              allowPrivilegeEscalation: false
              capabilities: { drop: [ "ALL" ] }
            resources:
              requests:
                cpu: 100m
                memory: 250Mi
              limits:
                memory: 2Gi
      microservices:
        replicas: 1
        annotations:
          secret.reloader.stakater.com/reload: *secret
          configmap.reloader.stakater.com/reload: *configmap
        pod:
          topologySpreadConstraints:
            - maxSkew: 1
              topologyKey: kubernetes.io/hostname
              whenUnsatisfiable: DoNotSchedule
              labelSelector:
                matchLabels:
                  app.kubernetes.io/instance: *app
                  app.kubernetes.io/controller: microservices
          nodeSelector:
            intel.feature.node.kubernetes.io/gpu: "true"
        containers:
          microservices:
            image:
              repository: ghcr.io/immich-app/immich-server
              tag: v1.135.0
            envFrom:
              - configMapRef:
                  name: *configmap
            env:
              IMMICH_WORKERS_EXCLUDE: api
              DB_PASSWORD:
                valueFrom:
                  secretKeyRef:
                    name: immich-pguser-immich
                    key: password
            resources:
              requests:
                gpu.intel.com/i915: 1
                cpu: 100m
                memory: 250Mi
              limits:
                gpu.intel.com/i915: 1
                memory: 2500Mi
      machine-learning:
        annotations:
          configmap.reloader.stakater.com/reload: *configmap
        pod:
          enableServiceLinks: false
          topologySpreadConstraints:
            - maxSkew: 1
              topologyKey: kubernetes.io/hostname
              whenUnsatisfiable: DoNotSchedule
              labelSelector:
                matchLabels:
                  app.kubernetes.io/instance: *app
                  app.kubernetes.io/component: machine-learning
        containers:
          machine-learning:
            image:
              repository: ghcr.io/immich-app/immich-machine-learning
              tag: v1.134.0
            resources:
              requests:
                cpu: 100m
                memory: 250Mi
              limits:
                memory: 4000Mi
            probes:
              liveness: &probes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /ping
                    port: &mlport 3003
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 5
              readiness: *probes
              startup:
                enabled: false
    defaultPodOptions:
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        fsGroupChangePolicy: OnRootMismatch
        supplementalGroups: [ 10000 ]
        seccompProfile: { type: RuntimeDefault }

    service:
      server:
        controller: server
        ports:
          http:
            port: *serverport
          metrics:
            port: 8081
      microservices:
        controller: microservices
        ports:
          metrics:
            port: 8081
      machine-learning:
        controller: machine-learning
        ports:
          http:
            port: *mlport
    route:
      app:
        hostnames: [ "photos.exelent.click" ]
        parentRefs:
          - name: external
            namespace: kube-system
            sectionName: https
        rules:
          - backendRefs:
              - identifier: server
                port: *serverport
        annotations:
          gethomepage.dev/enabled: "true"
          gethomepage.dev/icon: immich.png
          gethomepage.dev/name: Immich
          gethomepage.dev/group: "Home Apps"
          gethomepage.dev/description: Self-hosted google photos
          gethomepage.dev/weight: "2"
          gethomepage.dev/widget.type: immich
          gethomepage.dev/widget.url: http://immich-server.default:2283
          gethomepage.dev/widget.key: "{{`{{HOMEPAGE_VAR_IMMICH_TOKEN}}`}}"
          gethomepage.dev/widget.version: "2"
    persistence:
      config:
        type: secret
        name: immich-config-secret
        advancedMounts:
          server:
            server:
              - path: /config
          microservices:
            microservices:
              - path: /config
      library:
        type: nfs
        server: "192.168.20.5"
        path: "/volume1/kubernetes/immich"
        advancedMounts:
          server:
            server:
              - path: /usr/src/app/upload
          microservices:
            microservices:
              - path: /usr/src/app/upload
      geocoding-dump:
        type: emptyDir
        advancedMounts:
          server:
            server:
              - path: /usr/src/app/.reverse-geocoding-dump
          microservices:
            microservices:
              - path: /usr/src/app/.reverse-geocoding-dump
      geoname-dump:
        type: emptyDir
        advancedMounts:
          microservices:
            microservices:
              - path: /usr/src/app/node_modules/local-reverse-geocoder/geonames_dump
      transformers-cache:
        type: emptyDir
        advancedMounts:
          server:
            server:
              - path: /usr/src/app/.transformers_cache
          microservices:
            microservices:
              - path: /usr/src/app/.transformers_cache
      model-cache:
        type: emptyDir
        advancedMounts:
          machine-learning:
            machine-learning:
              - path: /cache
                subPath: cache
              - path: /.cache
                subPath: dotCache
      tmp:
        type: emptyDir
