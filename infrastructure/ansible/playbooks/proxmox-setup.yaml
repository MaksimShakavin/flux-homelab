---
- name: Setup proxmox nodes
  hosts:
    - proxmox
  become: false
  gather_facts: false
  any_errors_fatal: true

  tasks:
    - name: Get proxmox password from 1Password
      onepassword.connect.field_info:
        token: "{{ sops.OP_CONNECT_TOKEN }}"
        hostname: "{{ sops.OP_CONNECT_HOST }}"
        item: Proxmox root
        field: password
        vault: 4ebapsbutjt6t66s3y22ne4l4u
      no_log: true  # Turn off logs to avoid logging sensitive data
      delegate_to: localhost # this task is only run on localhost
      register: password

    - set_fact: # use registered password and vars to setup connection
        ansible_password: "{{ password.field.value }}"
      no_log: true

    - name: Gathering facts
      setup:


    - name: Remove PVE Enterprise repo
      ansible.builtin.apt_repository:
        repo: deb https://enterprise.proxmox.com/debian/pve {{ ansible_distribution_release }} pve-enterprise
        state: absent
        filename: pve-enterprise

    - name: Remove PVE Enterprise repo ceph
      ansible.builtin.apt_repository:
        repo: deb https://enterprise.proxmox.com/debian/ceph-quincy {{ ansible_distribution_release }} enterprise
        state: absent
        filename: pve-enterprise

    - name: Add PVE no-subscription repo
      ansible.builtin.apt_repository:
        repo: deb http://download.proxmox.com/debian/pve {{ ansible_distribution_release }} pve-no-subscription
        state: present
        filename: pve-no-subscription

    - name: Upgrade all system packages
      ansible.builtin.apt:
        upgrade: full
        update_cache: true
        cache_valid_time: 3600
        autoclean: true
        autoremove: true
      register: apt_upgrade
      retries: 5
      until: apt_upgrade is success

    - name: Print the field definition
      ansible.builtin.debug:
        msg: "{{ sops.SSH_PUB_KEY | regex_replace(\"[']\", '') }}"

    - name: Provision ssh key
      ansible.builtin.lineinfile:
        path: /{{ ansible_user }}/.ssh/authorized_keys
        line: "{{ sops.SSH_PUB_KEY | regex_replace(\"[']\", '') }}"
        create: yes
        state: present

    - name: Install common packages
      ansible.builtin.apt:
        name:
          - vim
          - htop
          - linux-cpupower
          - lm-sensors
        install_recommends: true
        update_cache: true
        cache_valid_time: 3600
        autoclean: true
        autoremove: true

    - name: Load lm_sensors modules
      community.general.modprobe:
        name: "{{ item }}"
        state: present
      loop:
        - coretemp
        - drivetemp
        - vfio
        - vfio_iommu_type1
        - vfio_pci
        - kvmgt

    - name: Enable lm_sensors modules on boot
      ansible.builtin.copy:
        mode: "0644"
        content: "{{ item }}"
        dest: "/etc/modules-load.d/{{ item }}.conf"
      loop:
        - coretemp
        - drivetemp
        - vfio
        - vfio_iommu_type1
        - vfio_pci
        - kvmgt

    - name: "Gather installed packages"
      ansible.builtin.package_facts:
        manager: auto

    - name: "Install pve fake subscription"
      when: "'pve-fake-subscription' not in ansible_facts.packages"
      block:
        - name: Get newest pve-fake-subscription release
          ansible.builtin.uri:
            url: https://api.github.com/repos/Jamesits/pve-fake-subscription/releases/latest
            return_content: true
          register: json_reponse

        - name: Create tmpdir
          ansible.builtin.tempfile:
            state: directory
          register: tmpdir

        - name: Download pve-fake-subscription
          ansible.builtin.get_url:
            url: "{{ json_reponse.json.assets[0].browser_download_url }}"
            dest: "{{ tmpdir.path }}"
            mode: "0644"
          register: download

        - name: Install pve-fake-subscription
          ansible.builtin.apt:
            deb: "{{ download.dest }}"

    - name: Install node-exporter
      ansible.builtin.include_role:
        name: prometheus.prometheus.node_exporter

    - name: Set up GPU Passthrough
      block:
        - name: Read /etc/default/grub content
          ansible.builtin.slurp:
            path: /etc/default/grub
          register: grub_file_content

        - name: Check if GRUB_CMDLINE_LINUX_DEFAULT contains intel_iommu=on
          set_fact:
            grub_cmdline_contains_iommu: "{{ (grub_file_content.content | b64decode).split('\n') | select('search', 'GRUB_CMDLINE_LINUX_DEFAULT=.*intel_iommu=on') | list | length > 0 }}"

        - name: Ensure GRUB_CMDLINE_LINUX_DEFAULT contains intel_iommu=on
          ansible.builtin.lineinfile:
            path: /etc/default/grub
            regexp: '^GRUB_CMDLINE_LINUX_DEFAULT='
            line: 'GRUB_CMDLINE_LINUX_DEFAULT="quiet intel_iommu=on"'
            backrefs: yes
            create: yes
          register: grub_config
          when: not grub_cmdline_contains_iommu

        - name: Update grub configuration if /etc/default/grub was modified
          ansible.builtin.command:
            cmd: update-grub
          when: grub_config.changed

        - name: Reboot the machine if /etc/default/grub was modified
          ansible.builtin.reboot:
          when: grub_config.changed

        - name: Reboot the machine if /etc/default/grub was modified
          ansible.builtin.reboot:
          when: grub_config.changed
          register: reboot_result

        - name: Wait for the machine to reboot
          ansible.builtin.wait_for_connection:
            timeout: 300
          when: reboot_result is changed

        - name: Check dmesg for DMAR or IOMMU messages
          ansible.builtin.command: dmesg | grep -e DMAR -e IOMMU
          register: dmesg_output
          when: reboot_result is changed

        - name: Fail if IOMMU is not enabled
          ansible.builtin.fail:
            msg: "IOMMU is not enabled"
          when: reboot_result is changed and 'IOMMU enabled' not in dmesg_output.stdout
